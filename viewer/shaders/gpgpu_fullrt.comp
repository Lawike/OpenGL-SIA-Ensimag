#version 430 core

layout(binding = 2, rgba32f) uniform writeonly image2D framebuffer;

uniform sampler2D colorTexture;
uniform mat4 mat_inverse;
uniform mat4 persp_inverse;
uniform float lightIntensity;
uniform vec3 lightPosition;
uniform bool blinnPhong;
uniform bool transparent;
uniform float shininess;
uniform float eta;
uniform float radius;
uniform float groundDistance;
uniform vec3 center;

#define MAX_SCENE_BOUNDS    10.0
#define EPS                 0.000001

#define MIN_DISTANCE EPS
#define GROUND_VPTR -1

#define M_1_PI 0.31830988618

#define Ka 0.2
#define Kd 0.3

struct hitinfo_t {
    /* Index of the first index of the triangle */
    /* or: GROUND_VPTR */
    int hit_vptr;
    /* Intersection distance, barycentric coordinates */
    /* or: intersection distance, 0, texture coordinates (for the ground) */
    vec4 t;
};

struct BVHNode {
    vec4 min;
    vec4 max;
    int nbTriangles;
    int index;
};

layout (std430, binding = 1) buffer Vertices
{
    vec4 vertices[];
};

layout (std430, binding = 2) buffer Normals
{
    vec4 normals[];
};

layout (std430, binding = 3) buffer Colors
{
    vec4 colors[];
};

layout (std430, binding = 4) buffer Meshes
{
    int indices[];
};

layout (std430, binding = 5) buffer BVHNodes
{
    BVHNode nodes[];
};


// Check whether there is an intersection between the ray (origin, dir) and the bounding box (bbmin, bbmax), 
// stores into tNear the nearest point of intersection on the ray.
bool intersectBoundingBox(vec4 origin, vec4 dir, vec4 bbmin, vec4 bbmax, out float tNear)
{
	// intersect with BB:
    vec4 sMin = (bbmin - origin) / dir;
    vec4 sMax = (bbmax - origin) / dir;

    vec4 tMin = min(sMin, sMax);
    vec4 tMax = max(sMin, sMax);

    tNear = max(max(tMin.x, tMin.y), tMin.z);
    float tFar = min(min(tMax.x, tMax.y), tMax.z);

	if (tNear < 0) tNear = 0; // starting point inside the BVH
    return tNear <= tFar;
}

// intersect ray (origin, dir) with triangle defined by ptr (number inside indexed face set)
// returns a boolean, plus the "t" of hitinfo structure (Intersection distance, barycentric coordinates)
bool intersectTriangle(vec4 origin, vec4 dir, int ptr, out vec4 dist)
{
	// vertices from data:
    vec4 v0 = vertices[indices[ptr]];
    vec4 v1 = vertices[indices[ptr + 1]];
    vec4 v2 = vertices[indices[ptr + 2]];

    vec3 e1 = (v1 - v0).xyz;
    vec3 e2 = (v2 - v0).xyz;

    vec3 p = cross(dir.xyz, e2);
    float det = dot(e1, p);
    if (abs(det) < EPS) return false;

    // We do early exit here: as soon as we can return false, we do.
    // In my tests, it is faster than computing all coordinates, 
    // *then* checking validity with a single test. YMMV, feel free to test
    vec3 t = (origin - v0).xyz;
    dist.y = dot(t, p);
    if (dist.y < 0.0 || dist.y > det) return false;
    vec3 q = cross(t, e1);
    dist.z = dot(dir.xyz, q);
    if (dist.z < 0.0 || dist.z > det) return false;
    dist.w = det - dist.y - dist.z;
    if (dist.w < 0.0) return false;
    dist.x = dot(e2, q);
    dist /= det;
    return (dist.x > EPS);
}

bool intersectGround(vec4 origin, vec4 dir, out vec4 dist)
{
    if (abs(dir.y) < EPS)
        return false;
    float t = -(origin.y + groundDistance) / dir.y;

    if (t < MIN_DISTANCE)
        return false;

    vec4 point = origin + t * dir;
    point.y = -groundDistance;
    vec4 scaledPoint = point / radius ;
    vec2 texCoords = 0.5 * scaledPoint.xz + 0.5;

    dist = vec4(t, 0.0, texCoords);

    return true;
}

vec4 interpolateColor(hitinfo_t h)
{
	if (colors.length() > 0) {
		vec4 c0 = colors[indices[h.hit_vptr]];
		vec4 c1 = colors[indices[h.hit_vptr + 1]];
		vec4 c2 = colors[indices[h.hit_vptr + 2]];
		return (h.t.w * c0 + h.t.y * c1 + h.t.z * c2);
	} else return vec4(0.7, 0.7, 0.7, 1.0);
}

vec4 interpolateNormal(hitinfo_t h)
{
    if (normals.length() > 0) {
		vec4 c0 = normals[indices[h.hit_vptr]];
		vec4 c1 = normals[indices[h.hit_vptr + 1]];
		vec4 c2 = normals[indices[h.hit_vptr + 2]];
		return normalize(h.t.w * c0 + h.t.y * c1 + h.t.z * c2);
	} else return vec4(1, 0, 0, 1);
}

// BVH-related functions:
bool isLeaf(BVHNode node)
{
    return node.nbTriangles != 0;
}

bool intersectBVHLeaf(BVHNode node, vec4 origin, vec4 dir, inout hitinfo_t h)
{
    bool hit = false;

    for (int i = 0; i < node.nbTriangles; ++i) {
        int vptr = 3 * (node.index + i);
        vec4 dist;
        if (intersectTriangle(origin, dir, vptr, dist) && dist.x < h.t.x) {
            hit = true;
            h.hit_vptr = vptr;
            h.t = dist;
        }
    }

    return hit;
}

bool intersectBVHLeaf(BVHNode node, vec4 origin, vec4 dir)
{
    for (int i = 0; i < node.nbTriangles; ++i) {
        int vptr = 3 * (node.index + i);
        vec4 dist;
        if (intersectTriangle(origin, dir, vptr, dist))
            return true;
    }

    return false;
}

#define MAX_STACK_SIZE 64

#define push(stack, size, value) stack[size++] = value
#define pop(stack, size) stack[--size]

bool intersectBVH(vec4 origin, vec4 dir, inout hitinfo_t h)
{
    int rootIndex = 0;
    BVHNode rootNode = nodes[rootIndex];
    float tNear;

    if (!intersectBoundingBox(origin, dir, rootNode.min, rootNode.max, tNear))
        return false;

    struct StackElement {
        int index;
        float t;
    } stack[MAX_STACK_SIZE];
    int size = 0;

    push(stack, size, StackElement(rootIndex, 0.0));

    bool hit = false;


    while (size != 0) {
        StackElement current = pop(stack, size);
        if (h.t.x < current.t)
            continue;

        BVHNode currentNode = nodes[current.index];
        if (isLeaf(currentNode)) {
            hit = intersectBVHLeaf(currentNode, origin, dir, h) || hit;
        } else {
            StackElement left = StackElement(current.index + 1, 0.0);
            BVHNode leftNode = nodes[left.index];
            bool hitLeft = intersectBoundingBox(origin, dir, leftNode.min, leftNode.max, left.t);

            StackElement right = StackElement(currentNode.index, 0.0);
            BVHNode rightNode = nodes[right.index];
            bool hitRight = intersectBoundingBox(origin, dir, rightNode.min, rightNode.max, right.t);

            if (hitLeft && hitRight) {
                if (left.t < right.t) {
                    push(stack, size, right);
                    push(stack, size, left);
                } else {
                    push(stack, size, left);
                    push(stack, size, right);
                }
            } else if (hitLeft) {
                push(stack, size, left);
            } else if (hitRight) {
                push(stack, size, right);
            }
        }
    }


    return hit;
}

bool intersectBVH(vec4 origin, vec4 dir)
{
    int rootIndex = 0;
    BVHNode rootNode = nodes[rootIndex];
    float tNear;

    if (!intersectBoundingBox(origin, dir, rootNode.min, rootNode.max, tNear))
        return false;

    int stack[MAX_STACK_SIZE];
    int size = 0;

    push(stack, size, rootIndex);

    while (size != 0) {
        int current = pop(stack, size);
        BVHNode currentNode = nodes[current];
        if (isLeaf(currentNode)) {
            if (intersectBVHLeaf(currentNode, origin, dir))
                return true;
        } else {
            int left = current + 1;
            BVHNode leftNode = nodes[left];
            bool hitLeft = intersectBoundingBox(origin, dir, leftNode.min, leftNode.max, tNear);

            int right = currentNode.index;
            BVHNode rightNode = nodes[right];
            bool hitRight = intersectBoundingBox(origin, dir, rightNode.min, rightNode.max, tNear);

            if (hitLeft && hitRight) {
                push(stack, size, right);
                push(stack, size, left);
            } else if (hitLeft) {
                push(stack, size, left);
            } else if (hitRight) {
                push(stack, size, right);
            }
        }
    }

    return false;
}
// End BVH-related functions

// Compute the first intersection along the ray (origin, dir). 
// returns the nearest intersection in h
bool firstIntersection(vec4 origin, vec4 dir, out hitinfo_t h)
{
    h.t.x = radius * MAX_SCENE_BOUNDS;

    bool hit = intersectBVH(origin, dir, h);

    vec4 dist;
    if (intersectGround(origin, dir, dist) && dist.x < h.t.x) {
        hit = true;
        h.hit_vptr = GROUND_VPTR;
        h.t = dist;
    }

	return hit;
}

// checks whether there is any intersection along the ray (origin, dir)
// Does not compute the nearest intersection, ends the loop as soon as an intersection is found.
bool isIntersected(vec4 origin, vec4 dir)
{
    vec4 dist;
    return intersectGround(origin, dir, dist) || intersectBVH(origin, dir);
}

// Local illumination related functions. TODO

float getFresnel(float cosTheta) {
    float sinTheta2 = 1 - (cosTheta * cosTheta);
    float ci = 0;
    if (eta*eta - sinTheta2 > 0) {
        ci = sqrt(eta*eta - sinTheta2);
    }
    float Fs = 0;
    if ((cosTheta + ci) != 0) {
        Fs = pow(abs((cosTheta - ci) / (cosTheta + ci)), 2);
    }
    float Fp = 0;
    if (eta * eta * cosTheta + ci != 0) {
        Fp = pow(abs((pow(eta, 2) * cosTheta - ci) / (eta * eta * cosTheta + ci)), 2);
    }
    float F = (Fs + Fp) / 2;
    return F;
}

float getTanTheta2(float cosTheta) {
    if ((cosTheta) == 0) {
        return 0;
    }
    return (1 - cosTheta * cosTheta) / (cosTheta * cosTheta);
}

float G1(float tanTheta2, float alpha) {
    if ((1 + sqrt(1 + alpha * alpha * tanTheta2)) == 0) {
        return 0;
    }
    return 2 / (1 + sqrt(1 + alpha * alpha * tanTheta2));
}

float getD(float cosThetaH, float alpha, int khi) {
    float tanThetaH2 = getTanTheta2(cosThetaH);

    float cosThetaH4 = cosThetaH * cosThetaH * cosThetaH * cosThetaH;
    float D = 0;
    if (((M_1_PI * cosThetaH4) * pow((alpha * alpha) + tanThetaH2, 2)) != 0) {
        D = (khi * (alpha * alpha)) / ((M_1_PI * cosThetaH4) * pow((alpha * alpha) + tanThetaH2, 2));
    }
    return D;
}

vec4 getSpecularLigthningCookTorrance(float cosTheta, float cosThetaI, float cosThetaO, float D, float alpha, vec4 color) {
    float tanThetaI2 = getTanTheta2(cosThetaI);
    float tanThetaO2 = getTanTheta2(cosThetaO);

     // Calcul de Cs
    vec4 Cs;
    float num = getFresnel(cosTheta) * D * G1(tanThetaI2, alpha) * G1(tanThetaO2, alpha);
    float denum = 4 * cosThetaI * cosThetaO;
    if (denum == 0) {
        Cs = color;
    } else {
        Cs = (num / denum) * color;
    }
    return Cs;
}

vec4 getSpecularLigthningBlinnPhong(float cosTheta, float cosThetaI, vec4 n, vec4 H, vec4 color) {
    float sinTheta2 = 1 - (cosTheta * cosTheta);
    return getFresnel(cosTheta) * color * pow(max(dot(n, H), 0), shininess) * lightIntensity;
}

vec4 directIllumination(vec4 color, vec4 p, vec4 n, vec4 v)
{
	// Goal: compute direct illumination at point p, from the light source at lightPosition.
	// color: local material color, RGBA
	// p: coordinates of intersection point, xyzw
	// n: normal at intersection point, xyzw
	// v: incoming viewing direction. Points towards the eye.
    // L: the vector to the lightSource 
    vec4 L = normalize(vec4(lightPosition, 1) - p);

    // Ambient lighting
    vec4 Ca = Ka * color * lightIntensity;

    float cosThetaI = dot(L, n);

    // Check if we're in the shadow
    bool isInShadow = (cosThetaI <= 0) || isIntersected(p, L) || isIntersected(p + n * EPS, L);
    if (isInShadow) {
        return Ca;
    }

    // Difuse lighting
    vec4 Cd = Kd * color * max(cosThetaI, 0) * lightIntensity;

    // Specular lighting
    vec4 VL = v + L;
    vec4 H = normalize(VL);
    float cosTheta = dot(H, L);
    float sinTheta2 = 1 - (cosTheta * cosTheta);
    vec4 Cs;
    // Model for specular lighting
    if (blinnPhong) { // Blinn Phong
        Cs = getSpecularLigthningBlinnPhong(cosTheta, cosThetaI, n, H, color);
    } else { // Cook-Torrance
        // Theta > 0, we need to check if it isn't > pi/2
        // Theta < 0 if cos(theta) > 0
        float cosThetaD = cosTheta;

        // Angle entre la normale et le demi-vecteur
        float cosThetaH = dot(H, n);
        float tanThetaH2 = getTanTheta2(cosThetaH);

        // Angle entre la normale par rapport à la surface moyenne et le rayon réfléchi
        float cosThetaO = dot(normalize(v), n);
        float tanThetaO2 = getTanTheta2(cosThetaO);

        // Angle entre la normale par rapport à la surface moyenne et le rayon émis
        float tanThetaI2 = getTanTheta2(cosThetaI);

        // Calcul de D
        int khi = 0;
        if (cosThetaD > 0) {
            khi = 1;    
        }
        float alpha = 0.5 - shininess / 400;
        if (alpha == 0) {
            alpha = 0.0025;
        }

        float cosThetaH4 = cosThetaH * cosThetaH * cosThetaH * cosThetaH;
        float D = 0;
        if (((M_1_PI * cosThetaH4) * pow((alpha * alpha) + tanThetaH2, 2)) != 0) {
            D = (khi * (alpha * alpha)) / ((M_1_PI * cosThetaH4) * pow((alpha * alpha) + tanThetaH2, 2));
        }
        Cs = getSpecularLigthningCookTorrance(cosThetaD, cosThetaI, cosThetaO, D, alpha, color);
    }
	return Ca + Cd + Cs;
}

const int MAX_TRACE = 10;

void getLocal(vec4 origin, vec4 dir, hitinfo_t h, out vec4 color, out vec4 p, out vec4 n)
{
    p = origin + h.t.x * dir;
    if (h.hit_vptr == GROUND_VPTR) {
        color = texture(colorTexture, h.t.pq);
        p.y = -groundDistance;
        n = vec4(0.0, 1.0, 0.0, 0.0);
    } else {
        color = interpolateColor(h);
        n = interpolateNormal(h);
    }
}


struct trace_state_t
{
    vec4 origin;  // start of ray
    vec4 dir;     // direction
    vec4 color;   // color after multiple bounces
    vec4 localColor;   // color of the material (after interpolation)
    hitinfo_t h;  // what the ray hits (triangle Id, u, v, lambda)
    vec4 hit;     // point the ray hits 
    vec4 Ld;      // direction to light at destination
    vec4 N;       // normal at destination
};

vec4 indirectIllumination(trace_state_t stack[MAX_TRACE + 1], vec4 color, vec4 p, vec4 n, vec4 v) {
    // Goal: compute indirect illumination at point p
	// color: local material color, RGBA
	// stack: stack containing all bounds
	// p: coordinates of intersection point, xyzw
	// n: normal at intersection point, xyzw
	// v: incoming viewing direction. Points towards the eye.
    
    hitinfo_t hit_info;    
    // Forward tracing
    int bounceIndex = 0;
    vec4 origin = p;
    vec4 dir = v;
    while (firstIntersection(origin, dir, hit_info) && bounceIndex < MAX_TRACE) {
        //getLocal(origin, dir, hit_info, localColor, hit, N);
        dir = dir - 2 * dot(dir, n) * n;

        trace_state_t trace_state;                          // allocating a new trace_state to add to the stack
        trace_state.origin = origin;                        // start of ray
        trace_state.dir = dir;                              // direction
        trace_state.color = interpolateColor(hit_info);     // color after multiple bounces
        trace_state.localColor;                             // color of the material (after interpolation)
        trace_state.h = hit_info;                           // what the ray hits (triangle Id, u, v, lambda)
        trace_state.hit;                                    // point the ray hits
        trace_state.Ld;                                     // direction to light at destination
        trace_state.N = interpolateNormal(hit_info);        // normal at destination

        stack[bounceIndex] = trace_state;
        bounceIndex++;
    }

    // TODO: Backward tracing
    return vec4(0, 0, 0, 1);
}

vec4 trace(vec4 origin, vec4 dir)
{
    // These variables are for TP2
    trace_state_t stack[MAX_TRACE + 1];
    bool fallback[MAX_TRACE + 1];
    int sp = 0;

	// These are for TP1:
    hitinfo_t hl;
    vec4 hit;
    vec4 localColor;
    vec4 N;

    float specular_factor, LdN;

	if (firstIntersection(origin, dir, hl)) {
		getLocal(origin, dir, hl, localColor, hit, N);
		return directIllumination(localColor, hit, N, -dir) + indirectIllumination(stack, localColor, hit, N, -dir);
	}

    return vec4(0, 0, 0, 1);
}

layout (local_size_x = 8, local_size_y = 8) in;
void main(void) {
	// Convert local screen coordinates into world coordinates
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }
    vec2 pos = pix / (size - vec2(0.5, 0.5));
    // pos in [0,1]^2 Need it in [-1,1]^2:
    pos = 2 * pos - vec2(1., 1.);

    // Step 1: I need pixel coordinates.
    vec4 worldPos = vec4(pos.x, pos.y, 1.0, 1.0);
    worldPos = persp_inverse * worldPos;
    worldPos /= worldPos.w;
    worldPos.w = 0;
    worldPos = normalize(worldPos);
    // Step 2: ray direction:
    vec4 dir = normalize((mat_inverse * worldPos));
    vec4 eye = (mat_inverse * vec4(0, 0, 0, 1));
    vec4 color = trace(eye, dir);

    imageStore(framebuffer, pix, color);
}
